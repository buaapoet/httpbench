.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HTTPBENCH 1"
.TH HTTPBENCH 1 "2014-06-22" "httpbench 0.2.1.1" "User Commands"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
httpbench \- Simple HTTP benchmarking tool
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
httpbench \-u <url or urllist.txt> \-d sec \-c concurrent \-r rps [\-t ms] [\-e expected]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1HTTP\s0 Bench is a small program for Linux, \s-1UNIX\s0 and a like written in C which can be used to benchmark \s-1HTTP\s0 servers. For more infos please consult the project website.
.SS "Arguments"
.IX Subsection "Arguments"
\fIMandatory\fR
.IX Subsection "Mandatory"
.ie n .IP """\-u url or urllist.txt""" 12
.el .IP "\f(CW\-u url or urllist.txt\fR" 12
.IX Item "-u url or urllist.txt"
An \s-1URL\s0 to benchmark if argument begins with http:// or https:// or a path to a text file containing a list of all HTTP-URLs to request during a benchmark. Each line should start with http:// or https://.
.ie n .IP """\-d seconds""" 12
.el .IP "\f(CW\-d seconds\fR" 12
.IX Item "-d seconds"
Duration of the benchmark in seconds. E.g. 300 for a five minutes benchmark.
.ie n .IP """\-c concurrent""" 12
.el .IP "\f(CW\-c concurrent\fR" 12
.IX Item "-c concurrent"
Number of cuncurrent threads used by the benchmark.
.ie n .IP """\-r rps""" 12
.el .IP "\f(CW\-r rps\fR" 12
.IX Item "-r rps"
Requests per second wanted for the benchmark.
.PP
\fIOptional\fR
.IX Subsection "Optional"
.ie n .IP """\-t timeoutms""" 12
.el .IP "\f(CW\-t timeoutms\fR" 12
.IX Item "-t timeoutms"
Timeout in milliseconds for each request. This timeout will actually not interrupt any requests. It's there just for statistical reasons. E.g. how many requests take longer than x milliseconds?
.ie n .IP """\-e expectedresponsestr""" 12
.el .IP "\f(CW\-e expectedresponsestr\fR" 12
.IX Item "-e expectedresponsestr"
The expected response of a request. E.g. all requests should contain \s-1HTML\s0 in its reponse. All responses not matching are counted and reported.
.SS "\s-1EXAMPLES\s0"
.IX Subsection "EXAMPLES"
.ie n .IP """httpbench \-u mylist.txt \-d 60 \-c 10 \-r 1000""" 12
.el .IP "\f(CWhttpbench \-u mylist.txt \-d 60 \-c 10 \-r 1000\fR" 12
.IX Item "httpbench -u mylist.txt -d 60 -c 10 -r 1000"
Iterates over each url in mylist.txt with 10 cuncurrent threads for 60 seconds and tries to reach 1000 requests per second. Each curl failure will be reported at the end of the test (total count and total %).
.ie n .IP """httpbench \-u http://www.example.com \-d 300 \-c 1000 \-r 10000 \-t 20 \-e ""Hello World""""" 12
.el .IP "\f(CWhttpbench \-u http://www.example.com \-d 300 \-c 1000 \-r 10000 \-t 20 \-e ``Hello World''\fR" 12
.IX Item "httpbench -u http://www.example.com -d 300 -c 1000 -r 10000 -t 20 -e ""Hello World"""
Benchmarks the single \s-1URL\s0 http://www.example.com with 1000 cuncurrent threads for 5 minutes and tries to reach 10000 requests per second. Each request which takes longer than 20 milliseconds will be reported at the end of the test (total count and total %) and each request which does not contain \*(L"Hello World\*(R" in its response string will also be reported (total count and total %). The curl errors will also be reported.
.SH "LICENSE"
.IX Header "LICENSE"
See package description or project website.
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul Buetow \- <http://httpbench.buetow.foo>
